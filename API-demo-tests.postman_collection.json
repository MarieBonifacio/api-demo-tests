{
	"info": {
		"_postman_id": "2a9c4aa3-64b1-45c2-9c4d-36c604dd1e8c",
		"name": "API-demo-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10954149"
	},
	"item": [
		{
			"name": "{{BASE_URL}}/posts/1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Génère un faux JWT “header.payload.signature”\r",
							"const fakeHeader = btoa(JSON.stringify({ alg: \"HS256\", typ: \"JWT\" }));\r",
							"const fakePayload = btoa(JSON.stringify({ sub: \"tester\", iat: Date.now()/1000 }));\r",
							"const fakeSignature = \"dummySignature\";\r",
							"const jwt = `${fakeHeader}.${fakePayload}.${fakeSignature}`;\r",
							"\r",
							"// Stocke dans la variable d'environnement\r",
							"pm.environment.set(\"AUTH_TOKEN\", jwt);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response matches the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"\r",
							"    pm.expect(responseData.userId).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.title).to.be.a('string');\r",
							"    pm.expect(responseData.body).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"});\r",
							"\r",
							"// 2. Corps contient la propriété userId\r",
							"pm.test(\"Body has userId\", () => {\r",
							"  const json = pm.response.json();\r",
							"  pm.expect(json).to.have.property(\"userId\");\r",
							"});\r",
							"\r",
							"pm.test(\"The body must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.body).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{AUTH_TOKEN}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/posts/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Posts – all",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/posts?content",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "content",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Post – create",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ---- Lecture de la ligne courante du CSV\r",
							"const titleSent = pm.iterationData.get(\"title\");\r",
							"const bodySent  = pm.iterationData.get(\"body\");\r",
							"const idSent    = pm.iterationData.get(\"userId\");\r",
							"\r",
							"// ---- Log dans la console Runner\r",
							"console.log(`Itération : titre = ${titleSent}`);\r",
							"\r",
							"// ---- Vérifications sur la réponse\r",
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Titre renvoyé = titre envoyé\", () => {\r",
							"  pm.expect(json.title).to.eql(titleSent);\r",
							"});\r",
							"\r",
							"pm.test(\"userId renvoyé = userId envoyé\", () => {\r",
							"  pm.expect(json.userId).to.eql(Number(idSent));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{title}}\",\r\n  \"body\": \"{{body}}\",\r\n  \"userId\": {{userId}}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/posts",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const currentTitle = pm.iterationData.get(\"title\");\r",
					"console.log(`Titre en cours : ${currentTitle}`);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "COLL_VAR",
			"value": "demo-value",
			"type": "string"
		}
	]
}